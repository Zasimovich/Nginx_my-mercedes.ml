
user  apache;    #От какого пользователя запускаем Nginx:
#worker_processes  1;
worker_processes  auto;  #

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid; #Идентификатор процесса запущенного сервера:


events {
    worker_connections  1024; #Внутри блока events, максимальное количество одновременных соединении с сервером
    multi_accept on;  #Внутри блока events, принимать соединения сколько будет возможно:
}


http {


    include       /etc/nginx/mime.types; #Подключить mimetypes:
    default_type  application/octet-stream; #Если MIME-тип файла не удастся определить, то по умолчанию файл будет бинарным:

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

log_format download  '$remote_addr - $remote_user [$time_local] '
                         '"$request" $status $bytes_sent '
                         '"$http_referer" "$http_user_agent" '
                         '"$http_range" "$sent_http_content_range"';

    access_log  /var/log/nginx/access.log  main; #запись журнала доступа (жёсткий диск не скажет спасибо)
    charset utf-8; # Установим кодировку по умолчанию:
server_tokens off;  #Отключим показ версии Nginx:
client_header_timeout 15; # Читать заголовок запроса клиента не более 15 секунд
client_body_timeout 30; #Читать тело запроса клиента не более 30 секунд — интервал устанавливается не на всю передачу тела запроса, а только между двумя последовательными операциями чтения:
send_timeout 15; #Если клиент не принимает ответ более 15 секунд, сбрасываем соединение:
client_max_body_size 8m; #Запросы больше 8 мегабайт принимать не будем:
limit_rate_after 30M; # Чтобы один пользователь не занял весь свободный канал трафика, после 30 Мб наложим ограничение на скорость отдачи данных:
limit_rate 500K; #Максимальная скорость с клиентом в рамках одного соединения после наложенных ограничений будет не более 500 Кб/с:
open_file_cache max=10000 inactive=3m; #Устанавливаем максимальное количество файлов, информация о которых будет содержаться в кеше и удаляться, если файл не будет запрошен повторно в течении 3 минут:
open_file_cache_min_uses 2; # Если файл будет запрошен более 2 раз, поместить в кэш:
open_file_cache_valid 1m; # Проверять актуальность кэша каждую минуту:

    sendfile        on; #Отдавать статику без посредников:
    tcp_nopush     on; # Отправлять заголовки одним пакетом:
    tcp_nodelay    on; # Не буферизировать данные:
    reset_timedout_connection on;  #сбрасывает соединения на которых уже прошли тайм-ауты (настройки безопасности) Закрывать соединение если клиент не отвечает
    keepalive_requests 1000; #Максимальное количество запросов с открытым соединением от одного клиента:
    #keepalive_requests 30;
    #keepalive_timeout 5;
    keepalive_timeout  120; #Держим соединение открытым не более 120 секунд
    types_hash_max_size 2048; ## Максимальный размер хэш-таблиц типов
   # server_names_hash_bucket_size 64; # Размер корзины в хэш-таблицах имён серверов (32|64|128) Эта директива применяется когда задано большое число имён серверов, либо заданы необычно длинные имена. Например, если значение по умолчанию равно 32 и имя сервера задано как “too.long.server.name.example.org”, то nginx откажется запускаться и выдаст сообщение об ошибке:
   #####
   # could not build the server_names_hash,
   # you should increase server_names_hash_bucket_size: 32
   #####
   # Поэтому лучше увеличить это значение до 64.

   # server_name_in_redirect off; # Указывание порта в перенаправлениях, выдаваемых от nginx

        ##
        # Gzip Settings
        ##
	gzip on; # Разрешает или запрещает сжатие ответа методом gzip
	gzip_buffers  8 64k; # Число и размер буферов в которые будет сжиматься ответ.
	gzip_static on; 
	gzip_comp_level 6; ## Степень сжатия (от 1 до 9)
	gzip_min_length 1024; # Минимальная длина ответа, при которой модуль будет жать, в байтах
        # gzip_proxied any; #Настройка сжатия ответа методом gzip для проксированных запросов  Разрешить сжатие для всех проксированных запросов 
        # gzip_http_version 1.1; # Минимальная HTTP-версия запроса для сжатия ответа.
	 gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript text/x-js;  # Сжатие ответа методом gzip для указанных MIME-типов в дополнение к "text/html". "text/html" сжимаются всегда.
        #gzip_vary       on;
        #gzip_disable   "msie6";  # Запрещает сжатие ответа методом gzip для IE6
       

	 # 1) MIME-типы которые необходимо жать
        #gzip_types text/plain text/html text/xml application/xml application/x-javascript text/javascript text/css text/json;
        # 2) Если у вас появляются предупреждения, типа "duplicate MIME type text/html", то стоит исключить text/html
        #gzip_types text/plain text/xml application/xml application/x-javascript text/javascript text/css text/json;
        #
        # Хватаемся за соломинку:
        #gzip_types text/html text/xml text/css application/x-javascript text/javascript;
        

proxy_connect_timeout 60;
proxy_send_timeout 90;
proxy_read_timeout 90;
proxy_redirect off;
proxy_set_header Connection close;
proxy_pass_header Content-Type;
proxy_pass_header Content-Disposition;
proxy_pass_header Content-Length;


    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*.conf;
}

#mail {
##       # See sample authentication script at:
##       # http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript
##
##       # auth_http localhost/auth.php;
##       # pop3_capabilities "TOP" "USER";
##       # imap_capabilities "IMAP4rev1" "UIDPLUS";
##
##       server {
##               listen     localhost:110;
##               protocol   pop3;
##               proxy      on;
##       }
##
##       server {
##               listen     localhost:143;
##               protocol   imap;
##               proxy      on;
##       }
##}
#
